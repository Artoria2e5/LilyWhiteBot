/*
 * ÊéÄÊ°åÂ≠ê
 *
 * Âú®Áæ§ÁµÑ‰∏≠‰ΩøÁî® !pia„ÄÅ!mua Âíå !hug ÔºàÂú®TelegramÁæ§ÁµÑ‰∏≠‰ΩøÁî® /pia„ÄÅ/mua Âíå /hugÔºâ
 */
'use strict';

const BridgeMsg = require('./transport/BridgeMsg.js');

module.exports = (pluginManager, options) => {
    const bridge = pluginManager.plugins.transport;

    const pia = (action, context) => {
        context.reply(`${action} ${context.param}`);

        // Â¶ÇÊûúÈñãÂïü‰∫Ü‰∫íËÅØÔºåËÄå‰∏îÊòØÂú®ÂÖ¨ÈñãÁæ§ÁµÑ‰∏≠‰ΩøÁî®Êú¨ÂëΩ‰ª§ÔºåÈÇ£È∫ºËÆìÂÖ∂‰ªñÁæ§‰πüÁúãË¶ãÊéÄÊ°å
        if (bridge && !context.isPrivate) {
            bridge.send(new BridgeMsg(context, {
                text: `${action} ${context.param}`,
                isNotice: true,
            }));
        }

        return Promise.resolve();
    };

    const p = context => pia('(‚ïØ¬∞–î¬∞)‚ïØÔ∏µ ~~~~~‚îª‚îÅ‚îª', context);
    const m = context => pia('o(*Ôø£3Ôø£)o', context);
    const h = context => pia('(„Å§¬∞œâ¬∞)„Å§', context);
    const e = context => pia('üç¥Ôºà‚âß‚ñ°‚â¶Ôºâüç¥', context);

    if (bridge) {
        bridge.addCommand('!pia', p, options);
        bridge.addCommand('!mua', m, options);
        bridge.addCommand('!hug', h, options);
        bridge.addCommand('!eat', e, options);
    } else {
        for (let [type, handler] of pluginManager.handlers) {
            handler.addCommand('!pia', p);
            handler.addCommand('!mua', m);
            handler.addCommand('!hug', h);
            handler.addCommand('!eat', e);
        }
    }
};
